{
  "hash": "3dc266627998153097eb7040adad2122",
  "result": {
    "markdown": "---\ntitle: \"Sampling from a Normal Distribution\"\nauthor: \"C. Gon\"\ndate: \"2023-03-31\"\ncategories: [news, code, analysis]\nimage: \"image.jpg\"\n---\n\n# Sampling from a Normal Distribution\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# # First, import the necessary libraries\n# import numpy as np\n# import matplotlib.pyplot as plt\n# from ipywidgets import interact, FloatSlider, IntSlider\n\n# # Then, define the function that you want to interact with\n# def plot_distribution(significance, sampling_error, variability, population_size):\n#     # Determine the sample size based on the significance, sampling error, and variability\n#     # Here, I'm using a simple formula for sample size calculation, you can replace it with your own formula\n#     z_score = 1.96\n#     sample_size = int((np.square(z_score)*variability*(1-variability))/np.square(sampling_error))\n\n#     # Adjust sample size for finite population\n#     adjusted_sample_size = int(sample_size / (1 + (sample_size - 1) / population_size))\n\n#     # Create a normally distributed sample with the given parameters\n#     sample = np.random.normal(loc=significance, scale=sampling_error, size=adjusted_sample_size)\n\n#     # Create the histogram of the sample\n#     plt.hist(sample, bins='auto')\n\n#     # Show the plot\n#     plt.show()\n\n#     return adjusted_sample_size\n\n# # Set up the interaction\n# interact(plot_distribution, \n#          significance=FloatSlider(value=0.5, min=0, max=1, step=0.01),\n#          sampling_error=FloatSlider(value=0.05, min=0, max=1, step=0.01),\n#          variability=FloatSlider(value=0.5, min=0, max=1, step=0.01),\n#          population_size=IntSlider(value=1000, min=1, max=100000, step=1))\n```\n:::\n\n\n# Sampling Calculator\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# import math\n\n# def calculate_sample_size(population_size, precision, sampling_error, variance):\n#     z_square = (1.96)**2  # Z-value for a 95% confidence level is 1.96\n#     e_square = (sampling_error / 100) ** 2\n#     p = variance / 100\n#     q = 1 - p\n\n#     # Calculate Cochran's sample size\n#     cochran_n = (z_square * p * q) / e_square\n\n#     # Apply finite population correction\n#     sample_size = cochran_n / (1 + ((cochran_n - 1) / population_size))\n\n#     return math.ceil(sample_size)\n\n# # Example inputs\n# population_size = 10000\n# precision = 0.05\n# sampling_error = 5\n# variance = 50\n\n# sample_size = calculate_sample_size(population_size, precision, sampling_error, variance)\n# print(f\"Required sample size: {sample_size}\")\n\n```\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}